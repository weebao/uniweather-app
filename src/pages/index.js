import Head from 'next/head';
import Image from 'next/head';
import dynamic from 'next/dynamic';
import { useState, useMemo, useEffect, useTransition } from 'react';

import { Button, IconButton, CssBaseline } from '@mui/material';
import { createTheme, ThemeProvider, responsiveFontSizes } from '@mui/material/styles';
import useMediaQuery from '@mui/material/useMediaQuery';
import { deepmerge } from '@mui/utils';
import { LightModeOutlined, DarkModeOutlined } from '@mui/icons-material';

import { UniForm } from '../components/UniForm';
import { getDesignTokens, getThemedComponents } from '../styles/Theme';
import { ColorModeContext } from '../config/color-context';

export default function Home() {
  // Handling theme settings
  const [mode, setMode] = useState();
  const [isPending, startTransition] = useTransition();
  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');
  const isSmall = useMediaQuery('(min-width: 600px)');
  const isMedium = useMediaQuery('(min-width: 900px)');

  useEffect(() => {
    setMode(prefersDarkMode ? 'dark' : 'light');
  }, [prefersDarkMode]);

  const colorMode = useMemo(
    () => ({
      toggleColorMode: () => {
        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));
      }
    })
  );

  const theme = responsiveFontSizes(useMemo(
    () => createTheme(deepmerge(getDesignTokens(mode), getThemedComponents(mode))),
    [mode]
  ));

  return (
    <ColorModeContext.Provider value={colorMode}>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <Head>
          <title>UniWeather</title>
          <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/weather.png" />
        </Head>
        <UniForm tabIndex="0" aria-label={`UniWeather App. Current mode: ${mode} mode`}>
          {isSmall 
          ? <Button
              aria-label={`Toggle ${mode === 'dark' ? 'light' : 'dark'} mode`}
              onClick={colorMode.toggleColorMode}
              variant="outlined"
              sx={{
                position: 'absolute',
                top: '32px',
                right: '32px',
              }}
              endIcon={
                mode === 'dark' 
                ? <LightModeOutlined /> 
                : <DarkModeOutlined />
              }
              color="modeBtn"
            >
            {
              mode === 'dark' 
              ? (isMedium ? "Light Mode" : "Light")
              : (isMedium ? "Dark Mode" : "Dark")
            }
            </Button>
          : <IconButton
              aria-label={`Toggle ${mode === 'dark' ? 'light' : 'dark'} mode`}
              onClick={colorMode.toggleColorMode}
              variant="outlined"
              sx={{
                position: {xs: 'absolute'},
                top: '24px',
                right: '24px',
                border: '1px solid ' + theme.palette.modeBtn.main + "80",
                borderRadius: '4px'
              }}
            >
              {
                mode === 'dark' 
                ? <LightModeOutlined sx={{ fontSize: '20px' }}/> 
                : <DarkModeOutlined sx={{ fontSize: '20px' }}/>
              }
            </IconButton>
          }
        </UniForm>
      </ThemeProvider>
    </ColorModeContext.Provider>
  )
}
